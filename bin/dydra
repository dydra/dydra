#!/usr/bin/env ruby
# This is free and unencumbered software released into the public domain.

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

require 'dydra'
require 'rdf/cli'

module Dydra
  class CLI
    BANNER = "Usage: #{RDF::CLI.basename} [options] command [args...]"

    def initialize(*args)
      options = {}
      @optparser = RDF::CLI.options do
        self.banner = BANNER
        self.on('-d', '--debug',   'Enable debug output for troubleshooting.') do
          options[:debug] = true
        end
        self.on('-v', '--verbose', 'Enable verbose output. May be given more than once.') do
          options[:verbose] = true
        end
        self.on('-V', '--version', 'Display the Dydra CLI version and exit.') do
          puts Dydra::VERSION; exit
        end
        self.on('-x', '--xml', 'Display SPARQL XML query results.') do
          options[:result_format] = :xml
        end
        self.on('-j', '--json', 'Display SPARQL JSON query results.') do
          options[:result_format] = :json
        end
        self.on('-l', '--columns', 'Display columnar SPARQL JSON query results.') do
          options[:result_format] = :columns
        end
        self.on('-b', '--base-uri BASE-URI', 'Set the base URI for imports.') do |base_uri| # FIXME
          options[:base_uri] = base_uri
        end
        self.on('-c', '--context CONTEXT-URI', 'Set the context URI (named graph) for imports.') do |context|
          options[:context] = context
        end
      end
      args = ARGV
      @options = options
      if args.empty?
        help
      elsif !public_methods(false).map(&:to_s).include?(args[0])
        puts "unknown command: #{args.first}"
        help
      else
        setup unless args.first == 'login'
        if @options[:debug] && args.first != 'login'
          if $dydra[:token]
            if $dydra[:user]
              puts "Using #{$dydra[:user]} with an authentication token, #{$dydra[:token]}"
            else
              puts "Using userless authentication (token #{$dydra[:token]}), all repository identifiers must include their owner."
            end
          else
            puts "Using #{$dydra[:user]} and password-based authentication"
          end
        end
        run_command(args) unless args.empty?
      end
    end

    def run_command(args)
      self.send(*args)
    rescue ArgumentError
      raise unless $!.backtrace[0][%r{^bin/dydra}]
      warn "`dydra #{args[0]}' was called incorrectly."
    end

    def setup
      begin
        Dydra::Client.setup!
      rescue Dydra::AuthenticationError
        Dydra::Command::Login.new.wrap_errors
      end
    end

    def help(command = nil)
      puts @optparser
      puts
      puts "Commands:"
      puts "    help        Shows this help."
      puts "    login       Caches your Dydra credentials locally."
      puts "    logout      Deletes your local credentials."
      puts "    list        Lists your repositories."
      puts "    open        Opens an account or a repository in a web browser."
      puts "    url         Outputs the URL of an account or a repository."
      puts "    create      Creates a new repository."
      puts "    drop        Destroys a repository permanently."
      puts "    clear       Deletes all data from a repository."
      puts "    count       Outputs the number of statements in a repository."
      puts "    query       Queries a repository."
      puts "    import      Imports data into a repository."
      puts "    export      Exports data from a repository in N-Triples format."
      puts "    status      Shows pending, running, and completed jobs."
      puts "    abort       Aborts a pending or running job."
    end

    def login(username = nil, password = nil)
      Command::Login.new(@options).wrap_errors(username, password)
    end

    def logout(*args)
      Command::Logout.new(@options).wrap_errors
    end

    def list(*resource_specs)
      Command::List.new(@options).wrap_errors(resource_specs.first)
    end

    def open(*resource_specs)
      Command::Open.new(@options).wrap_errors(*resource_specs)
    end

    def url(*resource_specs)
      Command::URL.new(@options).wrap_errors(*resource_specs)
    end

    def create(*repository_specs)
      Command::Create.new(@options).wrap_errors(*repository_specs)
    end

    def drop(*repository_specs)
      Command::Drop.new(@options).wrap_errors(*repository_specs)
    end

    def clear(*repository_specs)
      Command::Clear.new(@options).wrap_errors(*repository_specs)
    end

    def count(*repository_specs)
      Command::Count.new(@options).wrap_errors(*repository_specs)
    end

    def query(repository_spec, query = nil)
      Command::Query.new(@options).wrap_errors(repository_spec, query)
    end

    def import(repository_spec, *urls)
      Command::Import.new(@options).wrap_errors(repository_spec, *urls)
    end

    def export(*resource_specs)
      Command::Export.new(@options).wrap_errors(*resource_specs)
    end

    def status(job_uuid = nil)
      Command::Status.new(@options).wrap_errors(job_uuid)
    end

    def abort(job_uuid)
      Command::Abort.new(@options).wrap_errors(job_uuid)
    end

    def describe(repository_spec, query = nil)
      Command::Query.new(@options.merge({ :result_format => :sse })).wrap_errors(repository_spec, query)
    end
  end
end

trap(:INT) { abort "" }
Dydra::CLI.new(*ARGV)

#!/usr/bin/env ruby
# This is free and unencumbered software released into the public domain.

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

require 'dydra'
require 'rdf/cli'

module Dydra
  class CLI
    BANNER = "Usage: #{RDF::CLI.basename} [options] command [args...]"

    def initialize(*args)
      options = {}
      @optparser = RDF::CLI.options do
        self.banner = BANNER
        self.on('-d', '--debug',   'Enable debug output for troubleshooting.') do
          options[:debug] = true
        end
        self.on('-v', '--verbose', 'Enable verbose output. May be given more than once.') do
          options[:verbose] = true
        end
        self.on('-V', '--version', 'Display the Dydra CLI version and exit.') do
          puts Dydra::VERSION; exit
        end
        self.on('-x', '--xml', 'Display SPARQL XML query results.') do
          options[:result_format] = :xml
        end
        self.on('-j', '--json', 'Display SPARQL JSON query results.') do
          options[:result_format] = :json
        end
        self.on('-l', '--columns', 'Display columnar SPARQL JSON query results.') do
          options[:result_format] = :columns
        end
        self.on('-b', '--base-uri BASE-URI', 'Set the base URI for imports.') do |base_uri| # FIXME
          options[:base_uri] = base_uri
        end
        self.on('-c', '--context CONTEXT-URI', 'Set the context URI (named graph) for imports.') do |context|
          options[:context] = context
        end
      end
      args = ARGV
      @options = options

      command, args = args.shift, args
      if command.nil?
        help; exit
      end

      begin
        require "dydra/command/#{command}"
      rescue LoadError => e
        warn "unknown command: #{command}"
        help
        abort
      end

      setup unless args.first == 'login'
      if @options[:debug] && args.first != 'login'
        if $dydra[:token]
          if $dydra[:user]
            puts "Using #{$dydra[:user]} with an authentication token, #{$dydra[:token]}"
          else
            puts "Using userless authentication (token #{$dydra[:token]}), all repository identifiers must include their owner."
          end
        else
          puts "Using #{$dydra[:user]} and password-based authentication"
        end
      end

      klass_name = Dydra::Command.constants.find { |klass_name| klass_name.to_s.downcase == command }
      klass = Dydra::Command.const_get(klass_name)
      klass.new(@options).execute(*args)
    end

    def setup
      begin
        Dydra.setup!
      rescue Dydra::AuthenticationError
        Dydra::Command::Login.new.wrap_errors
      end
    end

    def help(command = nil)
      puts @optparser
      puts
      Dydra::Command::Help.new.execute(command)
    end
  end # CLI
end # Dydra

trap(:INT) { abort "" }
Dydra::CLI.new(*ARGV)
